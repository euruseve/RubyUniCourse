"""
An author of books
"""
type Author {
  active: Boolean!
  bio: String
  books: [Book!]!
  booksCount: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""
A book in the library
"""
type Book {
  author: Author
  coverUrl: String
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  title: String!
  updatedAt: ISO8601DateTime!
  year: Int!
}

type BooksPaginated {
  books: [Book!]!
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  perPage: Int!
  totalCount: Int!
  totalPages: Int!
}

"""
Autogenerated input type of CreateAuthor
"""
input CreateAuthorInput {
  active: Boolean
  bio: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of CreateAuthor.
"""
type CreateAuthorPayload {
  author: Author

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of CreateBook
"""
input CreateBookInput {
  authorId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  title: String!
  year: Int!
}

"""
Autogenerated return type of CreateBook.
"""
type CreateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of DeleteBook
"""
input DeleteBookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteBook.
"""
type DeleteBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Creates a new author
  """
  createAuthor(
    """
    Parameters for CreateAuthor
    """
    input: CreateAuthorInput!
  ): CreateAuthorPayload

  """
  Creates a new book
  """
  createBook(
    """
    Parameters for CreateBook
    """
    input: CreateBookInput!
  ): CreateBookPayload

  """
  Deletes a book
  """
  deleteBook(
    """
    Parameters for DeleteBook
    """
    input: DeleteBookInput!
  ): DeleteBookPayload

  """
  Updates an existing book
  """
  updateBook(
    """
    Parameters for UpdateBook
    """
    input: UpdateBookInput!
  ): UpdateBookPayload
}

"""
The query root of this schema
"""
type Query {
  """
  Find an author by ID
  """
  author(id: ID!): Author

  """
  Get all authors
  """
  authors(active: Boolean, limit: Int = 100, name: String, offset: Int = 0): [Author!]!

  """
  Total number of authors
  """
  authorsCount: Int!

  """
  Find a book by ID
  """
  book(id: ID!): Book

  """
  Get all books
  """
  books(limit: Int = 100, offset: Int = 0, title: String, year: Int): [Book!]!

  """
  Total number of books
  """
  booksCount: Int!
  booksPaginated(page: Int = 1, perPage: Int = 10): BooksPaginated!
}

"""
Autogenerated input type of UpdateBook
"""
input UpdateBookInput {
  authorId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  id: ID!
  title: String
  year: Int
}

"""
Autogenerated return type of UpdateBook.
"""
type UpdateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}
